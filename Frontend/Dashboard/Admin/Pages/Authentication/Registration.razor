@page "/registration"
@using Admin.DTOs.Authentication;
@using Admin.Services.Authentication;

<div class="card o-hidden border-0 shadow-lg my-5">
    <div class="card-body p-0">
        @if (ShowRegistrationErrors)
        {
        <div class="alert alert-danger" role="alert">
                @foreach (var error in Errors)
                {
                    <p>@error</p>
                }
        </div>
        }
        <!-- Nested Row within Card Body -->
        <div class="row">
            <div class="col-lg-5 d-none d-lg-block bg-register-image"></div>
            <div class="col-lg-7">
                <div class="p-5">
                    <div class="text-center">
                        <h1 class="h4 text-gray-900 mb-4">Create an Account!</h1>
                    </div>
                    <EditForm Model="_userForRegistration" OnValidSubmit="Register" class="card card-body bg-light mt-5">
                        <DataAnnotationsValidator />
                        <div class="form-group row">
                            <div class="col-sm-6 mb-3 mb-sm-0">
                                <input type="text" class="form-control form-control-user" @bind="_userForRegistration.Name"
                                       placeholder="First Name">
                                <ValidationMessage For="@(() => _userForRegistration.Name)" />
                            </div>
                            <div class="col-sm-6">
                                <input type="text" class="form-control form-control-user" @bind="_userForRegistration.Surname"
                                       placeholder="Last Name">
                                <ValidationMessage For="@(() => _userForRegistration.Surname)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <input type="email" class="form-control form-control-user" @bind="_userForRegistration.Email"
                                   placeholder="Email Address">
                            <ValidationMessage For="@(() => _userForRegistration.Email)" />
                        </div>
                        <div class="form-group row">
                            <div class="col-sm-6 mb-3 mb-sm-0">
                                <input type="password" class="form-control form-control-user"
                                       @bind="_userForRegistration.Password" placeholder="Password">
                                <ValidationMessage For="@(() => _userForRegistration.Password)" />
                            </div>
                            <div class="col-sm-6">
                                <input type="password" class="form-control form-control-user"
                                       @bind="_userForRegistration.ConfirmPassword" placeholder="Repeat Password">
                                <ValidationMessage For="@(() => _userForRegistration.ConfirmPassword)" />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary btn-user btn-block">Register Account</button>
                        <hr>
                        <a href="index.html" class="btn btn-google btn-user btn-block">
                            <i class="fab fa-google fa-fw"></i> Register with Google
                        </a>
                        <a href="index.html" class="btn btn-facebook btn-user btn-block">
                            <i class="fab fa-facebook-f fa-fw"></i> Register with Facebook
                        </a>
                    </EditForm>
                    <hr>
                    <div class="text-center">
                        <a class="small" href="/login">Already have an account? Login!</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private UserForRegistrationDto _userForRegistration = new UserForRegistrationDto();
    [Inject]
    public IAuthenticationService AuthenticationService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; }

    public async Task Register()
    {
        ShowRegistrationErrors = false;
        var result = await AuthenticationService.RegisterUser(_userForRegistration);
        if (!result.IsSuccessfulRegistration)
        {
            Errors = result.Errors;
            ShowRegistrationErrors = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
