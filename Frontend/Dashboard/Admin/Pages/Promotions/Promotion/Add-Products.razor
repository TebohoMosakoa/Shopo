@page "/add-products/{id}"
@using Admin.Components;
@using Admin.Models;
@using Admin.Parameter;
@using Admin.Services;

<section class="content-main">
    <div class="row">
         <div class="col-12">
                <div class="content-header">
                    <h2 class="content-title">Add Products</h2>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">Save</button>
                    </div>
                </div>
         </div>
        <hr>
        <div class="col-12">
            <div class="card-body">
                <article class="itemlist">
                    <div class="row align-items-center">
                        <div class="col-lg-12 col-sm-12 col-12 flex-grow-1 col-name">
                            <a class="itemside" href="#">
                                <div class="left">
                                    <img src="@_promotion.Image" class="img-sm img-thumbnail" alt="Item">
                                </div>
                                <div class="info">
                                    <h6 class="mb-0" style="color: orangered">Code : @_promotion.Code</h6>
                                </div>
                                <div class="info">
                                    <h6 class="mb-0" style="color: orangered">Name : @_promotion.Name</h6>
                                </div>
                                <div class="info">
                                    <h6 class="mb-0">Percentage @_promotion.Amount %</h6>
                                </div>
                            </a>
                        </div>
                    </div>
                </article>
            </div>
        </div>
    </div>
    <MultiSelector notSelected="notSelectedProducts" selected="selectedProducts"></MultiSelector>
    <div class="pagination-area mt-30 mb-50">
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" />
    </div>
</section>

@code {
    [Parameter]
    public String Id { get; set; }
    private Promotion _promotion = new Promotion();
    private SuccessNotification _notification;

    private List<PromotionProduct> allProducts = new List<PromotionProduct>();
    private List<PromotionProduct> selectedProducts = new List<PromotionProduct>();
    private List<PromotionProduct> notSelectedProducts = new List<PromotionProduct>();

    [Inject]
    private PromotionRepository _service { get; set; }
    [Inject]
    private IProductRepository ProductService { get; set; }
    [Inject]
    private IPromotionProductRepository repository { get; set; }

    private MetaData MetaData { get; set; } = new MetaData();
    private List<Product> products { get; set; } = new List<Product>();
    private QueryStringParameters _productParameters = new QueryStringParameters();
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _promotion = await _service.Get("Promotions", Convert.ToInt32(Id));

        var pagingResponse = await ProductService.GetAll(_productParameters);
        products = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

        foreach (var product in products)
        {
            PromotionProduct newProduct = new PromotionProduct()
                {
                    Name = product.Name,
                    Price = product.Price,
                    Code = product.Code,
                    Image = product.Image,
                    Brand = product.Brand.Name,
                    Category = product.Category.Name,
                    Department = product.Department.Name,
                    PromotionId = _promotion.Id
                };
            allProducts.Add(newProduct);
        }

        _productParameters.PromotionId = _promotion.Id;
        var pagingResponses = await repository.GetAll(_productParameters);
        if (pagingResponses.Items.Count() != 0)
        {
            selectedProducts = pagingResponses.Items;
            notSelectedProducts = allProducts.Except(selectedProducts).ToList();
        }
        else notSelectedProducts = allProducts;
    }

    private async Task GetProducts()
    {
        _productParameters.PromotionId = _promotion.Id;
        var pagingResponse = await ProductService.GetAll(_productParameters);
        products = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }
    private async Task SelectedPage(int page)
    {
        _productParameters.PageNumber = page;
        await GetProducts();
    }
}
