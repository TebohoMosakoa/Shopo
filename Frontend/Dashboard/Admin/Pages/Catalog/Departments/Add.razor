@page "/add-department"
@using Admin.Components;
@using Admin.Models;
@using Admin.Services;
@using Supabase;

<h2 class="content-title">Create Department</h2>

<div class="card shadow mb-4">
    <div class="card-body">
        <EditForm Model="_department" OnSubmit="CreateDepartment">
            <div class="row">
                <div>
                    <a href="/brands" class="btn btn-secondary btn-sm mx-3">Cancel</a>
                </div>
                <div>
                    <button class="btn btn-primary btn-sm" type="submit">Create</button>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <label class="form-label">Brand title</label>
                    <input type="text" placeholder="Type here" class="form-control" @bind="_department.Name">
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    <InputFile OnChange="@HandleSelected" />
                </div>
            </div>
        </EditForm>
    </div>
    <SuccessNotification @ref="_notification" />
</div>

@code {
    private Department _department = new Department();
    [Inject]
    private DepartmentRepository DepartmentService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    private SuccessNotification _notification;

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        Client client = new Client(
        "https://ssofxpefzklnnhguydwz.supabase.co",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzb2Z4cGVmemtsbm5oZ3V5ZHd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTAwNTA5MTIsImV4cCI6MjAwNTYyNjkxMn0.6j-lmzZ7_R3P5ODVKvXPgPhfT-Tn8u8a3PGmKsivi3A",
        new SupabaseOptions
            {
                AutoRefreshToken = true,
                AutoConnectRealtime = true,
            });

        var imageFile = e.File;
        if (imageFile == null)
            return;
        var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
        using (var file = resizedFile.OpenReadStream(resizedFile.Size))
        {
            var memoryStream = new MemoryStream();
            await file.CopyToAsync(memoryStream);
            var lastIndexOfDot = imageFile.Name.LastIndexOf('.');

            string extension = imageFile.Name.Substring(lastIndexOfDot + 1);
            Guid uniqueID = Guid.NewGuid();

            string name = $"spane-{uniqueID}.{extension}";

            await client.Storage.From("spane-images").Upload(
                memoryStream.ToArray(), name);

            string url = client.Storage.From("spane-images").GetPublicUrl(name, null);
            _department.Image = url;
        }
    }

    public async Task CreateDepartment()
    {
        await DepartmentService.Add("Departments", _department);
        _notification.Show();
        NavigationManager.NavigateTo("/Departments");
    }
}
