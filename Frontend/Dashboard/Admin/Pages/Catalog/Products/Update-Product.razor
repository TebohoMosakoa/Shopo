@page "/update-product/{id}"
@using Admin.Components;
@using Admin.DTOs;
@using Admin.Models;
@using Admin.Parameter;
@using Admin.Services;
@using AutoMapper;
@using Supabase;

<section class="content-main">
    <div class="row">
        <EditForm Model="_product" OnSubmit="UpdateProduct">
            <div class="col-9">
                <div class="content-header">
                    <h2 class="content-title">Update Product</h2>
                    <div>
                        <button class="btn btn-md rounded font-sm hover-up" type="submit">Update</button>
                    </div>
                </div>
            </div>
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="col-lg-3 col-sm-3 col-6 flex-grow-1 col-name">
                            <a class="itemside" href="#">
                                <div class="left">
                                    <img src="@_product.Image" class="img-sm img-thumbnail" alt="Item">
                                </div>
                                <div class="info">
                                    <InputFile OnChange="@HandleSelected" />
                                </div>
                            </a>
                        </div>
                    </div>
                </div> <!-- card end// -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-4">
                            <label class="form-label">Product title</label>
                            <input type="text" placeholder="Type here" class="form-control" @bind="_product.Name">
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product title</label>
                            <input type="text" placeholder="Type here" class="form-control" @bind="_product.Code">
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product Price</label>
                            <input type="number" placeholder="Type here" class="form-control" @bind="_product.Price">
                        </div>
                        <div class="mb-4">
                            <label class="form-label">Product description</label>
                            <textarea type="text" placeholder="Type here" class="form-control" @bind="_product.Description"/>
                        </div>
                        <div class="mb-4">
                            <div class="col-6">
                                <label class="form-label">Product size</label>
                                <input type="text" placeholder="Type here" class="form-control" @bind="_product.Size">
                            </div>
                            <div class="col-6">
                                <label class="form-label">Product color</label>
                                <input type="text" placeholder="Type here" class="form-control" @bind="_product.Color">
                            </div>                            
                        </div>
                    </div>
                </div> <!-- card end// -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">Brand <span>*</span></label>
                            <InputSelect class="form-control" @bind-Value="_product.BrandId">
                                @foreach (var item in brands)
                                {
                                        <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Category <span>*</span></label>
                            <InputSelect class="form-control" @bind-Value="_product.CategoryId">
                                @foreach (var item in categories)
                                {
                                            <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Department <span>*</span></label>
                            <InputSelect class="form-control" @bind-Value="_product.DepartmentId">
                                @foreach (var item in departments)
                                {
                                        <option value="@item.Id">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
    <SuccessNotification @ref="_notification" />
</section>


@code {
    [Inject]
    protected IMapper _mapper { get; set; }
    private Product _product;
    private ProductDTO product;

    private SuccessNotification _notification;

    [Parameter]
    public String Id { get; set; }
    private List<Brand> brands;
    private List<Category> categories;
    private List<Department> departments;
    [Inject]
    private IProductRepository ProductRepository { get; set; }
    [Inject]
    private CategoryRepository CategoryRepository { get; set; }
    [Inject]
    private DepartmentRepository DepartmentRepository { get; set; }
    [Inject]
    private BrandRepository BrandRepository { get; set; }
    private QueryStringParameters _brandParameters = new QueryStringParameters();
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _product = await ProductRepository.Get(Convert.ToInt32(Id));
        await GetBrands();
        await GetCategories();
        await GetDepartments();
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        Client client = new Client(
        "https://ssofxpefzklnnhguydwz.supabase.co",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzb2Z4cGVmemtsbm5oZ3V5ZHd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTAwNTA5MTIsImV4cCI6MjAwNTYyNjkxMn0.6j-lmzZ7_R3P5ODVKvXPgPhfT-Tn8u8a3PGmKsivi3A",
        new SupabaseOptions
            {
                AutoRefreshToken = true,
                AutoConnectRealtime = true,
            });

        var imageFile = e.File;
        if (imageFile == null)
            return;
        var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
        using (var file = resizedFile.OpenReadStream(resizedFile.Size))
        {
            var memoryStream = new MemoryStream();
            await file.CopyToAsync(memoryStream);
            var lastIndexOfDot = imageFile.Name.LastIndexOf('.');

            string extension = imageFile.Name.Substring(lastIndexOfDot + 1);
            Guid uniqueID = Guid.NewGuid();

            string name = $"spane-{uniqueID}.{extension}";

            await client.Storage.From("spane-images").Upload(
                memoryStream.ToArray(), name);

            string url = client.Storage.From("spane-images").GetPublicUrl(name, null);
            _product.Image = url;
        }
    }

    public async Task UpdateProduct()
    {
        product = _mapper.Map<ProductDTO>(_product);
        await ProductRepository.Update(product);
        _notification.Show();
        NavigationManager.NavigateTo("/Products");
    }

    private async Task GetBrands()
    {
        var pagingResponse = await BrandRepository.GetAll("Brands", _brandParameters);
        brands = pagingResponse.Items;
    }
    private async Task GetCategories()
    {
        var pagingResponse = await CategoryRepository.GetAll("Categories", _brandParameters);
        categories = pagingResponse.Items;
    }
    private async Task GetDepartments()
    {
        var pagingResponse = await DepartmentRepository.GetAll("Departments", _brandParameters);
        departments = pagingResponse.Items;
    }
}
