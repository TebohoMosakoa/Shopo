@page "/update-product/{id}"
@using Admin.Components;
@using Admin.DTOs;
@using Admin.Models;
@using Admin.Parameter;
@using Admin.Services;
@using AutoMapper;
@using Supabase;

<h2 class="content-title">Create Brand</h2>

<div class="row">
    <EditForm Model="_product" OnSubmit="UpdateProduct">
        <div class="row">
            <div>
                <a href="/brands" class="btn btn-secondary btn-sm mx-3">Cancel</a>
            </div>
            <div>
                <button class="btn btn-primary btn-sm" type="submit">Create</button>
            </div>
        </div>
        <br />
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <label class="form-label">Product title</label>
                        <input type="text" placeholder="Type here" class="form-control" @bind="_product.Name">
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <label class="form-label">Product Code</label>
                        <input type="number" placeholder="Type here" class="form-control" @bind="_product.Code">
                    </div>
                    <div class="col-lg-4 col-md-4 col-sm-12">
                        <label class="form-label">Product Price</label>
                        <input type="number" placeholder="Type here" class="form-control" @bind="_product.Price">
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <label class="form-label">Product description</label>
                        <textarea type="text" placeholder="Type here" class="form-control" @bind="_product.Description" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <label class="form-label">Product size</label>
                        <input type="text" placeholder="Type here" class="form-control" @bind="_product.Size">
                    </div>
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        <label class="form-label">Product color</label>
                        <input type="text" placeholder="Type here" class="form-control" @bind="_product.Color">
                    </div>
                </div>
            </div>
        </div>
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <label class="form-label">Brand <span>*</span></label>
                        <InputSelect class="form-control" @bind-Value="_product.BrandId">
                            @foreach (var item in brands)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <label class="form-label">Category <span>*</span></label>
                        <InputSelect class="form-control" @bind-Value="_product.CategoryId">
                            @foreach (var item in categories)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <label class="form-label">Department <span>*</span></label>
                        <InputSelect class="form-control" @bind-Value="_product.DepartmentId">
                            @foreach (var item in departments)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
        </div>
        <div class="card shadow mb-4">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-12 col-md-12 col-sm-12">
                        <div class="d-flex flex-row pr-2 pb-4">
                            <img src="@_product.Image1" class="img-sm img-thumbnail" style="width:5em;height:5em;" alt="Item">
                            <img src="@_product.Image2" class="img-sm img-thumbnail" style="width:5em;height:5em;" alt="Item">
                            <img src="@_product.Image3" class="img-sm img-thumbnail" style="width:5em;height:5em;" alt="Item">
                            <img src="@_product.Image4" class="img-sm img-thumbnail" style="width:5em;height:5em;" alt="Item">
                        </div>
                    <div class="info">
                        <InputFile OnChange="@HandleSelected" multiple/>
                    </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    <SuccessNotification @ref="_notification" />
</div>

@code {
    string? status;
    [Inject]
    protected IMapper _mapper { get; set; }
    private Product _product;
    private ProductDTO product;

    private SuccessNotification _notification;

    [Parameter]
    public String Id { get; set; }
    private List<Brand> brands;
    private List<Category> categories;
    private List<Department> departments;
    [Inject]
    private IProductRepository ProductRepository { get; set; }
    [Inject]
    private CategoryRepository CategoryRepository { get; set; }
    [Inject]
    private DepartmentRepository DepartmentRepository { get; set; }
    [Inject]
    private BrandRepository BrandRepository { get; set; }
    private QueryStringParameters _brandParameters = new QueryStringParameters();
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _product = await ProductRepository.Get(Convert.ToInt32(Id));
        await GetBrands();
        await GetCategories();
        await GetDepartments();
    }

    private async Task HandleSelected(InputFileChangeEventArgs e)
    {
        Int32 i = 1;
        Client client = new Client(
        "https://ssofxpefzklnnhguydwz.supabase.co",
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNzb2Z4cGVmemtsbm5oZ3V5ZHd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTAwNTA5MTIsImV4cCI6MjAwNTYyNjkxMn0.6j-lmzZ7_R3P5ODVKvXPgPhfT-Tn8u8a3PGmKsivi3A",
        new SupabaseOptions
            {
                AutoRefreshToken = true,
                AutoConnectRealtime = true,
            });

        foreach (var image in e.GetMultipleFiles(e.FileCount))
        {
            status += "\nReading file: " + image.Name;
            _ = InvokeAsync(StateHasChanged);

            var imageFile = image;
            if (imageFile == null)
                return;
            var resizedFile = await imageFile.RequestImageFileAsync("image/png", 300, 500);
            using (var file = resizedFile.OpenReadStream(resizedFile.Size))
            {
                var memoryStream = new MemoryStream();
                await file.CopyToAsync(memoryStream);
                var lastIndexOfDot = imageFile.Name.LastIndexOf('.');

                string extension = imageFile.Name.Substring(lastIndexOfDot + 1);
                Guid uniqueID = Guid.NewGuid();

                string name = $"spane-{uniqueID}.{extension}";

                await client.Storage.From("spane-images").Upload(
                    memoryStream.ToArray(), name);

                string url = client.Storage.From("spane-images").GetPublicUrl(name, null);
                switch (i)
                {
                    case 2:
                        _product.Image2 = url;
                        break;
                    case 3:
                        _product.Image3 = url;
                        break;
                    case 4:
                        _product.Image4 = url;
                        break;
                    default:
                        _product.Image1 = url;
                        break;
                }
                i++;
            }
        }
    }

    public async Task UpdateProduct()
    {
        product = _mapper.Map<ProductDTO>(_product);
        await ProductRepository.Update(product);
        _notification.Show();
        NavigationManager.NavigateTo("/Products");
    }

    private async Task GetBrands()
    {
        var pagingResponse = await BrandRepository.GetAll("Brands", _brandParameters);
        brands = pagingResponse.Items;
    }
    private async Task GetCategories()
    {
        var pagingResponse = await CategoryRepository.GetAll("Categories", _brandParameters);
        categories = pagingResponse.Items;
    }
    private async Task GetDepartments()
    {
        var pagingResponse = await DepartmentRepository.GetAll("Departments", _brandParameters);
        departments = pagingResponse.Items;
    }
}
